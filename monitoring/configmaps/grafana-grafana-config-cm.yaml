apiVersion: v1
data:
  grafana.ini: |-
    ; instance_name = ${HOSTNAME}
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins

    [server]
    ;protocol = http
    ;http_addr =
    ;http_port = 3000
    ;domain = localhost
    ;enforce_domain = false
    ;root_url = %(protocol)s://%(domain)s:%(http_port)s/
    ;router_logging = false
    ;static_root_path = public
    ;enable_gzip = false
    ;cert_file =
    ;cert_key =

    [database]
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    ;password =
    ;ssl_mode = disable
    ;path = grafana.db

    [session]
    ;provider = file
    ;provider_config = sessions
    ;cookie_name = grafana_sess
    ;cookie_secure = false
    ;session_life_time = 86400

    [analytics]
    ;reporting_enabled = true
    check_for_updates = true
    ;google_analytics_ua_id =

    [security]
    ;admin_user = admin
    ;admin_password = admin
    ;secret_key = SW2YcwTIb9zpOOhoPsMm
    ;login_remember_days = 7
    ;cookie_username = grafana_user
    ;cookie_remember_name = grafana_remember
    ;disable_gravatar = false
    ;data_source_proxy_whitelist =

    [snapshots]
    ;external_enabled = true
    ;external_snapshot_url = https://snapshots-origin.raintank.io
    ;external_snapshot_name = Publish to snapshot.raintank.io

    [users]
    ;allow_sign_up = true
    ;allow_org_create = true
    ;auto_assign_org = true
    ;auto_assign_org_role = Viewer
    ;login_hint = email or username
    ;default_theme = dark

    [auth.anonymous]
    ;enabled = false
    ;org_name = Main Org.
    ;org_role = Viewer

    [auth.github]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    ;team_ids =
    ;allowed_organizations =

    [auth.google]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    ;allowed_domains =

    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true

    [auth.basic]
    ;enabled = true

    [auth.ldap]
    enabled = true
    ;config_file = /etc/grafana/ldap.toml

    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost

    [emails]
    ;welcome_email_on_sign_up = false

    [log]
    mode = console
    level = info

    [log.console]
    ;level =
    ;format = console

    [event_publisher]
    ;enabled = false
    ;rabbitmq_url = amqp://localhost/
    ;exchange = grafana_events

    [dashboards.json]
    enabled = true
    path = /var/lib/grafana/dashboards

    [metrics]
    ;enabled           = true
    ;interval_seconds  = 10

    ; [metrics.graphite]
    ; address = localhost:2003
    ; prefix = prod.grafana.%(instance_name)s.

    [grafana_net]
    url = https://grafana.net
  ldap.toml: |-
    # Set to true to log user information returned from LDAP
    verbose_logging = false

    [[servers]]
    # Ldap server host
    host = "cdc.pulse.corp"
    # Default port is 389 or 636 if use_ssl = true
    port = 636
    # Set to true if ldap server supports TLS
    use_ssl = true
    # set to true if you want to skip ssl cert validation
    ssl_skip_verify = true

    # Search user bind dn
    bind_dn = "CN=grafanak8s,OU=Service Accounts,OU=PulsePoint,DC=pulse,DC=corp"
    # Search user bind password
    bind_password = "946lWcnEvE0Cs@s"

    # Search filter, for example "(cn=%s)" or "(sAMAccountName=%s)"
    search_filter = "(sAMAccountName=%s)"
    # An array of base dns to search through
    search_base_dns = ["DC=pulse,DC=corp"]

    # Specify names of the ldap attributes your ldap uses
    [servers.attributes]
    name = "givenName"
    surname = "sn"
    #username = "cn"
    username = "sAMAccountName"
    member_of = "memberOf"
    email =  "mail"

    # Map ldap groups to grafana org roles
    [[servers.group_mappings]]
    group_dn = "CN=TechOps,OU=Organizational,OU=Groups,OU=PulsePoint,DC=pulse,DC=corp"
    org_role = "Admin"
    # The Grafana organization database id, optional, if left out the default org (id 1) will be used
    #org_id = 1

    [[servers.group_mappings]]
    group_dn = "CN=Technology Operations,OU=Organizational,OU=Groups,OU=PulsePoint,DC=pulse,DC=corp"
    org_role = "Admin"

    [[servers.group_mappings]]
    group_dn = "CN=Domain Users,CN=Users,DC=pulse,DC=corp"
    org_role = "Editor"

    [[servers.group_mappings]]
    # If you want to match all (or no ldap groups) then you can use wildcard
    group_dn = "*"
    org_role = "Editor"
kind: ConfigMap
metadata:
  name: grafana-grafana-config
  namespace: monitoring

